<%
# Set our working directory.
working_dir = Pathname.new(context.working_dir)

if ! working_dir.exist?
    working_dir = Pathname.new(ENV['HOME'])
elsif working_dir.file?
    working_dir = working_dir.parent
end
%>
#!/bin/bash
# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port to run server on
port=$(find_port ${host} 32768 65535)

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# The `$CONFIG_FILE` environment variable is exported as it is used in the main
# `script.sh.erb` file when launching the Jupyter Notebook server.
export CONFIG_FILE="${PWD}/config.py"

# Generate Jupyter configuration file with secure file permissions
(
umask 077
cat > "${CONFIG_FILE}" << EOL
c.NotebookApp.ip = '*'
c.NotebookApp.port = ${port}
c.NotebookApp.port_retries = 0
c.NotebookApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.NotebookApp.base_url = '/node/${host}/${port}/'
c.NotebookApp.allow_origin = '*'
c.NotebookApp.notebook_dir = '<%= working_dir.to_s %>'
c.NotebookApp.disable_check_xsrf = True
c.NotebookApp.open_browser = False

c.ServerApp.ip = '*'
c.ServerApp.port = ${port}
c.ServerApp.port_retries = 0
c.PasswordIdentityProvider.hashed_password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.ServerApp.base_url = '/node/${host}/${port}/'
c.ServerApp.allow_origin = '*'
c.ServerApp.root_dir = '<%= working_dir.to_s %>'
c.ServerApp.disable_check_xsrf = True
c.ServerApp.open_browser = False
EOL
)

<%- unless MultiTenant.specs.nil? || MultiTenant.specs.empty? -%>
export OLLAMA_HOST=<%= context.ollama_interface %>
<%- end -%>

